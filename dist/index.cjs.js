"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});function c(e){if(e===null||typeof e!="object")return e;const t=Array.isArray(e)?[]:{};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=c(e[r]));return t}const a=(e,t,r,i=!1)=>{let n=e;for(let o=0;o<t.length;o++){const s=t[o];if(n===null||typeof n!="object")throw new Error("One or more path levels are not valid. The entire nested structure you specified must be spreadable down to (but not including) the last item.");const u=n[s];if(o===t.length-1)if(i){if(Object.is(u,r))return!0}else return n[s]=r,!0;else!i&&u!==null&&typeof u=="object"&&(n[s]=Array.isArray(n[s])?[...n[s]]:{...n[s]});n=n[s]}return!1},y=(e,t,r)=>{const i=t.replace(/\[([^\[\]]*)\]/g,".$1").split(".");if(a(e,i,r,!0))return e;const n={...e};return a(n,i,r),n};class l{constructor(t){this.entity=t}set(t){return Object.keys(t).filter(i=>!Object.is(t[i],this.entity[i])).length!==0?new l({...this.entity,...t}):this}setPath(t,r){const i=y(this.entity,t,r);return Object.is(i,this.entity)?this:new l(i)}recipe(t){return t(this)}get(){return this.entity}getClone(){return c(this.entity)}}function h(e){return new l(e)}exports.EntityClass=l;exports.entity=h;
